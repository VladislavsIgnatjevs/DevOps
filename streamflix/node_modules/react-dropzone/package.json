{
  "name": "react-dropzone",
  "description": "Simple HTML5 drag-drop zone with React.js",
  "main": "dist/index.js",
  "scripts": {
    "clean": "rimraf ./dist",
    "build": "npm run clean && webpack",
    "prepublish": "NODE_ENV=production npm run build && jest",
    "test": "npm run eslint:src && jest --coverage",
    "eslint:src": "eslint ./src ./*.js",
    "eslint:fix": "eslint --fix",
    "git:add": "git add",
    "lint-staged": "lint-staged",
    "deps": "npm-check -s",
    "deps:update": "npm-check -u",
    "semantic-release": "semantic-release pre && npm publish && semantic-release post"
  },
  "lint-staged": {
    "*.js": [
      "eslint:fix",
      "git:add"
    ]
  },
  "pre-commit": [
    "lint-staged"
  ],
  "jest": {
    "setupTestFrameworkScriptFile": "<rootDir>/testSetup.js"
  },
  "keywords": [
    "react-component",
    "react",
    "drag",
    "drop",
    "upload"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/okonet/react-dropzone.git"
  },
  "bugs": {
    "url": "https://github.com/okonet/react-dropzone/issues"
  },
  "homepage": "https://github.com/okonet/react-dropzone",
  "author": {
    "name": "Param Aggarwal"
  },
  "contributors": [
    {
      "name": "Andrey Okonetchnikov",
      "email": "andrey@okonet.ru",
      "url": "http://okonet.ru"
    },
    {
      "name": "Param Aggarwal"
    }
  ],
  "license": "MIT",
  "peerDependencies": {
    "react": "^0.14.0 || ^15.0.0"
  },
  "dependencies": {
    "attr-accept": "^1.0.3"
  },
  "devDependencies": {
    "babel-cli": "^6.9.0",
    "babel-core": "^6.9.1",
    "babel-eslint": "^7.1.1",
    "babel-jest": "^18.0.0",
    "babel-loader": "^6.2.2",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-react": "^6.3.13",
    "babel-preset-stage-0": "^6.3.13",
    "babel-register": "^6.9.0",
    "enzyme": "^2.6.0",
    "cz-conventional-changelog": "^1.2.0",
    "eslint": "^3.11.0",
    "eslint-config-airbnb": "^13.0.0",
    "eslint-plugin-import": "^2.2.0",
    "eslint-plugin-jsx-a11y": "^2.2.3",
    "eslint-plugin-react": "^6.7.1",
    "jest": "^18.0.0",
    "lint-staged": "^3.2.1",
    "npm-check": "^5.2.1",
    "pre-commit": "^1.1.3",
    "react": "^15.4.1",
    "react-addons-test-utils": "^15.4.1",
    "react-dom": "^15.4.1",
    "rimraf": "^2.5.2",
    "semantic-release": "^6.3.2",
    "sinon": "^1.17.4",
    "webpack": "^1.13.1"
  },
  "config": {
    "commitizen": {
      "path": "./node_modules/cz-conventional-changelog"
    }
  },
  "version": "3.9.1",
  "readme": "react-dropzone [![Build Status](https://travis-ci.org/okonet/react-dropzone.svg?branch=master)](https://travis-ci.org/okonet/react-dropzone) [![npm version](https://badge.fury.io/js/react-dropzone.svg)](https://badge.fury.io/js/react-dropzone) [![codecov](https://codecov.io/gh/okonet/react-dropzone/branch/master/graph/badge.svg)](https://codecov.io/gh/okonet/react-dropzone)\n\n==============\n\nSimple HTML5 drag-drop zone for files with React.js.\n\nTry it out here: http://okonet.ru/react-dropzone/\n\nInstallation\n============\n\nThe easiest way to use react-dropzone is to install it from npm and include it in your React build process (using [Webpack](http://webpack.github.io/), [Browserify](http://browserify.org/), etc).\n\n```\nnpm install --save react-dropzone\n```\n\nCreate a standalone module using *WebPack*:\n```\n> npm install\n> webpack\n```\n\nReact 0.13 users\n=====\n\nVesion 3.x is not compatible with React 0.13. If you can't upgrade to React 0.14 right now, you should use v 2.x of this package.\n\n```\nnpm install --save react-dropzone@2.x\n```\n\nUsage\n=====\n\nSimply `require('react-dropzone')` and specify an `onDrop` method which accepts two arguments. The first argument represents the accepted files and the second argument the rejected files.\n\nThe `onDrop` method gets always called if a file was uploaded, regardless if it was accepted or rejected. The library provides two additional methods named `onDropAccepted` and `onDropRejected`. The `onDropAccepted` method will be called if all dropped files were accepted and the `onDropRejected` method will be called if any of the dropped files was rejected.\n\nBy default, the component picks up some default styling to get you started. You can customize `<Dropzone>` by specifying a `style` and `activeStyle` which is applied when a file is dragged over the zone. You can also specify `className` and `activeClassName` if you would rather style using CSS.\n\nExample\n=====\n\n```jsx\n\n/** @jsx React.DOM */\nvar React = require('react');\nvar Dropzone = require('react-dropzone');\n\nvar DropzoneDemo = React.createClass({\n    onDrop: function (acceptedFiles, rejectedFiles) {\n      console.log('Accepted files: ', acceptedFiles);\n      console.log('Rejected files: ', rejectedFiles);\n    },\n\n    render: function () {\n      return (\n          <div>\n            <Dropzone onDrop={this.onDrop}>\n              <div>Try dropping some files here, or click to select files to upload.</div>\n            </Dropzone>\n          </div>\n      );\n    }\n});\n\nReact.render(<DropzoneDemo />, document.body);\n```\n\nFeatures\n========\n\n- `disableClick` `[Boolean | **false**]` — Clicking the `<Dropzone>` brings up the browser file picker.\n- `multiple` `[Boolean | **true**]` — Accept multiple files\n- `minSize` `[Number | **0**]` —  Only accept file(s) larger than  `minSize` bytes.\n- `maxSize` `[Number | **Infinity**]` — Only accept file(s) smaller than  `maxSize` bytes.\n- `accept` - Accept only specified mime types. Must be a valid [MIME type](http://www.iana.org/assignments/media-types/media-types.xhtml) according to [input element specification](https://www.w3.org/wiki/HTML/Elements/input/file), for example `application/pdf`, `image/*`, `audio/aiff,audio/midi`\n\nTo show a preview of the dropped file while it uploads, use the `file.preview` property. Use `<img src={file.preview} />` to display a preview of the image dropped.\nYou can disable the creation of the preview (for example if you drop big files) by setting the `disablePreview` prop to `true`.\n\n#### Manual Upload\n* To trigger the dropzone manually (open the file prompt), call the component's `open` function.\n* The completion handler for the `open` function is also the `onDrop` function.\n\n```jsx\n/** @jsx React.DOM */\nvar React = require('react');\nvar Dropzone = require('react-dropzone');\n\nvar DropzoneDemo = React.createClass({\n    getInitialState: function () {\n        return {\n          files: []\n        };\n    },\n\n    onDrop: function (acceptedFiles) {\n      this.setState({\n        files: acceptedFiles\n      });\n    },\n\n    onOpenClick: function () {\n      this.dropzone.open();\n    },\n\n    render: function () {\n        return (\n            <div>\n                <Dropzone ref={(node) => { this.dropzone = node; }} onDrop={this.onDrop}>\n                    <div>Try dropping some files here, or click to select files to upload.</div>\n                </Dropzone>\n                <button type=\"button\" onClick={this.onOpenClick}>\n                    Open Dropzone\n                </button>\n                {this.state.files.length > 0 ? <div>\n                <h2>Uploading {this.state.files.length} files...</h2>\n                <div>{this.state.files.map((file) => <img src={file.preview} /> )}</div>\n                </div> : null}\n            </div>\n        );\n    }\n});\n\nReact.render(<DropzoneDemo />, document.body);\n```\n\nUploads\n=======\n\nUsing `react-dropzone` is similar to using a file form field, but instead of getting the `files` property from the field, you listen to the `onDrop` callback to handle the files. Simple explanation here: http://abandon.ie/notebook/simple-file-uploads-using-jquery-ajax\n\nSpecifying the `onDrop` method, provides you with an array of [Files](https://developer.mozilla.org/en-US/docs/Web/API/File) which you can then send to a server. For example, with [SuperAgent](https://github.com/visionmedia/superagent) as a http/ajax library:\n\n```javascript\n    onDrop: function(acceptedFiles){\n        var req = request.post('/upload');\n        acceptedFiles.forEach((file)=> {\n            req.attach(file.name, file);\n        });\n        req.end(callback);\n    }\n```\n\nLicense\n=======\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "react-dropzone@3.9.1",
  "dist": {
    "shasum": "5ffaf14c984d0534df39326454e22b958985ad21"
  },
  "_from": "react-dropzone@",
  "_resolved": "https://registry.npmjs.org/react-dropzone/-/react-dropzone-3.9.1.tgz"
}
